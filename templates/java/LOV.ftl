<#ftl encoding="UTF-8">
<#import "/mylib.ftl" as mylib>
/**
 * Warning: Generated code! do not change!
 * Generated by: java/LOV.ftl
 */
package ${subnamespace}.${lov.namespace};

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import pt.armis.toolkit.api.Value;

<#assign type = ''>
<#if lov.numeric>
	<#assign type = 'Integer'>
<#else>
	<#assign type = 'String'>
</#if>
public enum ${lov.name} implements Value<${type}> {
<#if lov.numeric>
	<#assign aspas = ''>
<#else>
	<#assign aspas = '"'>
</#if>
<#assign empty = 1>
<#list lov.items as item>
	<#if item.key!="">
		<#assign empty = 0>
	</#if>
</#list>
<#list lov.items as item>
    <#if item.value??>
        <#if item.value?substring(0,1)=='"'>
            <#assign kind='String'>
        <#else>
            <#assign kind='int'>
        </#if>
        <#break>
    </#if>
</#list> 
<#assign value = -1>
<#list lov.items as item>
	<#if item.value??>
	/**
	 * ${item.name}<#if kind??>(${item.value})</#if>
	 */
	</#if>
	<#if item.key=="">
	   <#if lov.numeric>
           <#assign value = value + 1>
	   <#else>
	       <#assign value = item.name>
	   </#if>
	<#else>
	   <#assign value = item.key>
	</#if>
	<#if empty == 1>
	${item.name}<#if item.value??>(${item.value})</#if><#if item_has_next>,<#else>;</#if>
	<#else>
	${item.name}(${aspas}${value}${aspas}<#if item.value??>, ${item.value}</#if>)<#if item_has_next>,<#else>;</#if>
	</#if>
</#list>

<#if empty != 1>
    private ${type} value;
</#if>
<#if kind??>
    private ${kind} secret;
</#if>

<#if empty != 1 || kind??>
    private ${lov.name}() { }

</#if>
<#if empty == 1>
    private ${lov.name}(<#if kind??>${kind} secret</#if>) {
<#else>
    private ${lov.name}(${type} value<#if kind??>, ${kind} secret</#if>) {
		this.value = value;
</#if>
<#if kind??>
		this.secret = secret;
</#if>
    }

<#if empty == 1>
    @JsonValue
	public ${type} value(){ return this.<#if lov.numeric>ordinal<#else>name</#if>(); }
	
    @JsonCreator
	<#if lov.numeric>
    public static ${lov.name} fromValue(int value) {
		${lov.name}[] arr = ${lov.name}.values();
		if(value >= 0 && value < arr.length) {
			return arr[value];
		}
        throw new IllegalArgumentException(value + " is an invalid ordinal for ${lov.name}");
    }
	<#else>
    public static ${lov.name} fromValue(String value) {
		return ${lov.name}.valueOf(value);
	}
	</#if>
<#else>
    @JsonValue
	public ${type} value(){ return value; }

    @JsonCreator
    public static ${lov.name} fromValue(${type} value){
        if(value != null) {
            for (final ${lov.name} element : ${lov.name}.values()) {
                if (element.value().equals(value)) {
                    return element;
                }
            }
        }
        
        throw new IllegalArgumentException("${lov.name} does not have any element with value " + value);
    }    
</#if>
	    
<#if kind??>
    public ${kind} secret(){ return secret; }
        
</#if>    
}
