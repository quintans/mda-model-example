<#ftl encoding="UTF-8">
<#import "/mylib.ftl" as mylib>
/// <reference path="scadabt.d.ts"/>

// Generated by: ts/Services.ftl

module ${project}{
    var defaultCallback: (fail: Fail) => ng.IPromise<void>;
    function buildDefaultCallback($rootScope: MyRootScope, $interpolate: ng.IInterpolateService, $q: ng.IQService): (fail: Fail) => ng.IPromise<void>{
        if(defaultCallback) {
            return defaultCallback;
        }
        defaultCallback = function(fail: Fail): ng.IPromise<void> { // this callback is used
            if(fail.error === SYS_ERROR) {
                scadabt.stickyError($rootScope.i18n.serverError, $interpolate($rootScope.i18n.generalError)({url: fail.message[0], message: fail.message[1]}));
            } else {
                var tpl = $rootScope.i18n.errors[fail.error];
                if(tpl) {
                    tpl = $interpolate(tpl)(fail.message);
                } else {
                    tpl = fail.error;
                    if(fail.message) {
                        tpl += ": " + fail.message;
                    }
                }
                scadabt.warning($rootScope.i18n.serverError, tpl);
            }
    
            return $q.reject(fail);
        }
        return defaultCallback;
    }

    var mod = angular.module("scadabt.services", []);
<#list Service as service>
    mod.factory("${service.name?uncap_first}", ["$http", "$q", "$rootScope", "$interpolate", 
        function($http: ng.IHttpService, $q: ng.IQService, $rootScope: MyRootScope, $interpolate: ng.IInterpolateService): ${service.name} {
	   return {        
	<#assign signatures = [] />
	<#list service.operations as operation>
		<#-- return type -->
		<#assign ret = ''>
		<#if operation.modeledType>
			<#assign md = model[operation.type]>
			<#assign ret = md.name>
		<#elseif operation.customType>
			<#assign ret = operation.type>
		<#elseif operation.type??>
			<#if operation.single && !operation.paginate>
				<#assign ret = ts['string']>
			<#else>
				<#assign ret = ts[operation.type]>
			</#if>
		</#if>
		<#if !operation.single>
			<#assign ret = 'Array<'+ret+'>'>
		</#if>		
		<#if operation.paginate>
			<#assign ret = 'toolkit.Page<' + ret + '>'>
		</#if>
		<#-- parameters -->
		<#assign stringify = 0>
		<#assign param = ''>
		<#if operation.attributes?size == 1>
			<#assign parameter = operation.attributes?first>
			<#if parameter.modeledType>
				<#assign md = model[parameter.type]>
				<#assign param = md.name>
			<#elseif parameter.customType>
				<#assign param = parameter.type>
			<#else>
				<#assign param = ts[parameter.type]>
			</#if>
			<#if !parameter.single>
				<#assign param = 'Array<'+param+'>'>
			<#elseif parameter.type == 'boolean' || parameter.type == 'integer'>
				<#assign stringified = '"" + ' + parameter.name>
			<#elseif parameter.type == 'string'>
				<#assign stringified = '\'"\' + ' + parameter.name + ' + \'"\''>
			<#else>
				<#assign stringified = parameter.name>
			</#if>
		</#if>
		<#assign signature=(operation.name+'(')>
		<#if param != ''>
			<#assign signature=signature+parameter.name+': '+param+', '>
		<#elseif (operation.attributes?size > 0)>
			<#assign signature=signature+'input: '+operation.name?cap_first+'In, '>
		</#if>
		<#assign signature=signature+('successCallback?: (')>
		<#if ret != ''>
			<#assign signature=signature+ 'result: '+ret >
		</#if>
		<#assign signature=signature+(') => void, errorCallback?: (error: Fail) => void): ng.IHttpPromise<any>')>
		<#assign signatures=signatures+[signature]>
				
		<#--${operation.name}(<#if param != ''>${parameter.name}: ${param}, <#elseif (operation.attributes?size > 0)>input: ${operation.name?cap_first}In, </#if>successCallback?: (result: ${ret}) => void, errorCallback?: (error) => void) {-->
            ${signature} {
		<#if param != ''>
                var payload: any = ${parameter.name} != null ? ${stringified} : "null";
		</#if>
            	var promise = $http.post("rest/${service.alias?uncap_first}/${operation.name}", <#if param != ''>payload<#elseif (operation.attributes?size > 0)>input<#else>{}</#if>);
                if(successCallback != null) {
                    promise.success(successCallback);
                }
                promise.error(errorCallback != null ? errorCallback : buildDefaultCallback($rootScope, $interpolate, $q));
                return promise;
            }<#if operation_has_next>,</#if>
	</#list>
    	}
    }]);

</#list>
    /* #CUSTOM_BLK_START SERVICES# */
    /* #CUSTOM_BLK_END# */
}
