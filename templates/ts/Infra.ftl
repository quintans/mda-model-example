<#ftl encoding="UTF-8">
<#import "/mylib.ftl" as mylib>
/// <reference path="scadabt.d.ts"/>

'use strict';

/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/Infra.ftl
 */


module ${project} {
<#-- LOV -->
<#list LOV as lov>
	export enum ${lov.name} {
	<#list lov.items as item>
		${item.name}<#if item_has_next>,</#if>
	</#list>
	}
	
</#list>
<#-- DTO -->
<#list DTO as dto>
	export class ${dto.name} <#if dto.hasBehavior('CRITERIA')>extends toolkit.Criteria <#elseif dto.parent??>extends ${dto.parent.name} </#if>{
	<#list dto.attributes as attribute>
		<#if attribute.lov??>
            <#if attribute.lov.numeric>
                <#assign type = 'number'>
            <#else>
                <#assign type = 'string'>
            </#if>
		<#else>
			<#assign type = ts[attribute.type]>
		</#if>
		<#if !attribute.single>
			<#assign type = 'Array<'+type+'>'>
		</#if>
	<#if attribute.defaultValue??>
		<#if attribute.lov??>
		  <#if attribute.lov.numeric>
		      <#assign defaultValue = project+'.'+attribute.lov.name+'.'+attribute.defaultValue>
		  <#else>
              <#assign defaultValue = project+'.'+attribute.lov.name+'['+project+'.'+attribute.lov.name+'.'+attribute.defaultValue+']'>
		  </#if>
		<#elseif attribute.type == 'string'>
			<#assign defaultValue = '"'+attribute.defaultValue+'"'>
		<#else>
			<#assign defaultValue = attribute.defaultValue>
		</#if>
		${attribute.name?uncap_first}: ${type} = ${defaultValue}; <#if attribute.lov??>// ${attribute.lov.name}</#if>
	<#else>
		${attribute.name?uncap_first}: ${type}; <#if attribute.lov??>// ${attribute.lov.name}</#if>
	</#if>
	</#list>
	<#list dto.references as ref>
		<#if ref.model.lov?? || ref.model.stereotype == 'LOV'>
            <#if ref.model.lov.numeric>
                <#assign type = 'number'>
            <#else>
                <#assign type = 'string'>
            </#if>
		<#else>
			<#assign type = ref.model.name>
		</#if>
		<#if ref.paginate>
			<#assign type = 'toolkit.Page<' + type + '>'>
		</#if>
		<#if !ref.single>
			<#assign type = 'Array<'+type+'>'>
		</#if>		
		${ref.name?uncap_first}: ${type}; <#if ref.model.lov??>// ${ref.model.lov.name}</#if>
	</#list>
<#--
		clone(): ${dto.name} {
			var o = new ${dto.name}();
			o.copy(this);
			return o;
		}
	
		copy(dto: ${dto.name}): ${dto.name} {
	<#if dto.hasBehavior('CRITERIA') || dto.parent??>
			super.copy(dto);
	</#if>
	<#list dto.attributes as attribute>
			this.${attribute.name?uncap_first} = dto.${attribute.name?uncap_first};
	</#list>
	<#list dto.references as ref>
			this.${ref.name?uncap_first} = dto.${ref.name?uncap_first};
	</#list>
			return this;
		}
	
	<#if dto.hasBehavior('CRITERIA')>
		reset(){
			this.page = 1;
	<#list dto.attributes as attribute>
			this.${attribute.name?uncap_first} = null;
	</#list>
	<#list dto.references as ref>
			this.${ref.name?uncap_first} = null;
	</#list>
		}
	</#if>
-->
	}

</#list>
<#-- Service -->
<#list Service as service>
	<#list service.operations as sublistItem>
		<#if (sublistItem?? && sublistItem.attributes?size > 1)>
	export class ${sublistItem.name?cap_first}In {
			<#if sublistItem.attributes??>
				<#list sublistItem.attributes as parameter>
					<#if parameter.modeledType>
						<#assign md = model[parameter.type]>
						<#assign param = subnamespace+'.'+md.namespace+'.'+md.name>
					<#elseif parameter.customType>
						<#assign param = parameter.type>
					<#else>
						<#assign param = ts[parameter.type]>
					</#if>
					<#if !parameter.single>
						<#assign param = 'Array<'+param+'>'>
					</#if>
		${parameter.name?uncap_first}: ${param};
				</#list>
			</#if>	
	}

		</#if>
	</#list>
    export interface ${service.name} {
	<#list service.operations as operation>
		<#-- return type -->
		<#assign ret = 'void'>
		<#if operation.modeledType>
			<#assign md = model[operation.type]>
			<#assign ret = md.name>
		<#elseif operation.customType>
			<#assign ret = operation.type>
		<#elseif operation.type??>
			<#if operation.single && !operation.paginate>
				<#assign ret = ts['string']>
			<#else>
				<#assign ret = ts[operation.type]>
			</#if>
		</#if>
		<#if !operation.single>
			<#assign ret = 'Array<'+ret+'>'>
		</#if>		
		<#if operation.paginate>
			<#assign ret = 'toolkit.Page<' + ret + '>'>
		</#if>
		<#-- parameters -->
		<#assign stringify = 0>
		<#assign param = ''>
		<#if operation.attributes?size == 1>
			<#assign parameter = operation.attributes?first>
			<#if parameter.modeledType>
				<#assign md = model[parameter.type]>
				<#assign param = md.name>
			<#elseif parameter.customType>
				<#assign param = parameter.type>
			<#else>
				<#assign param = ts[parameter.type]>
			</#if>
			<#if !parameter.single>
				<#assign param = 'Array<'+param+'>'>
			<#elseif parameter.type == 'boolean' || parameter.type == 'integer'>
				<#assign stringified = '"" + ' + parameter.name>
			<#elseif parameter.type == 'string'>
				<#assign stringified = '\'"\' + ' + parameter.name + ' + \'"\''>
			<#else>
				<#assign stringified = parameter.name>
			</#if>
		</#if>
		${operation.name}(<#if param != ''>${parameter.name}: ${param}, <#elseif (operation.attributes?size > 0)>input: ${operation.name?cap_first}In, </#if>successCallback?: (result: ${ret}) => void, errorCallback?: (error: Fail) => void): ng.IHttpPromise<any>;
	</#list>
	}
	
</#list>
<#list Const as const>
	export module ${const.name} {
	<#list const.items as item>
		export var ${item.name} = ${ts[item.type].instanciate(item.value)};
	</#list>
	}
	
</#list>
}
